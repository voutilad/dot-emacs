#+TITLE: C (is for Cookie)
#+Author: Dave Voutila
#+Email: voutilad@gmail.com

* C!
  The best language?

  Let's follow the [[https://openbsd.org][OpenBSD]] style format.

  #+BEGIN_SRC emacs-lisp
    (c-add-style "openbsd"
                 '("bsd"
                   (c-backspace-function . delete-backward-char)
                   (c-syntactic-indentation-in-macros . nil)
                   (c-tab-always-indent . nil)
                   (c-hanging-braces-alist
                    (block-close . c-snug-do-while))
                   (c-offsets-alist
                    (arglist-cont-nonempty . *)
                    (statement-cont . *))
                   (indent-tabs-mode . t)))

    (c-add-style "redpanda"
                 '((c-basic-offset . 2)
                   (c-offsets-alist
                    (knr-argdecl-intro . +)
                    (substatement-open . +)
                    (substatement-label . 2)
                    (label . 2)
                    (inline-open . +)
                    (inexpr-class . +)
                    (defun-open . 0)
                    (class-open . 0)
                    (class-close . 0)
                    (func-decl-cont . +)
                    (knr-argdecl . 0)
                    (annotation-top-cont . 0)
                    (annotation-var-cont . +)
                    (member-init-cont . c-lineup-multi-inher)
                    (inher-intro . +)
                    (block-open . 0)
                    (brace-list-open . 0)
                    (statement-case-intro . +)
                    (statement-case-open . 0)
                    (substatement . +)
                    (case-label . 0)
                    (access-label . -)
                    (do-while-closure . 0)
                    (else-clause . 0)
                    (catch-clause . 0)
                    (stream-op . c-lineup-streamop)
                    (inclass . +)
                    (cpp-macro-cont . +)
                    (cpp-define-intro c-lineup-cpp-define +)
                    (friend . 0)
                    (objc-method-intro .
                                       [0])
                    (objc-method-args-cont . c-lineup-ObjC-method-args)
                    (objc-method-call-cont c-lineup-ObjC-method-call-colons
                                           c-lineup-ObjC-method-call +)
                    (extern-lang-open . 0)
                    (namespace-open . 0)
                    (module-open . 0)
                    (composition-open . 0)
                    (extern-lang-close . 0)
                    (module-close . 0)
                    (composition-close . 0)
                    (inextern-lang . +)
                    (inmodule . +)
                    (incomposition . +)
                    (template-args-cont c-lineup-template-args +)
                    (inlambda . 0)
                    (lambda-intro-cont . +)
                    (inexpr-statement . +)
                    (topmost-intro . 0)
                    (topmost-intro-cont . 0)
                    (arglist-intro . +)
                    (arglist-cont . 0)
                    (defun-block-intro . ++)
                    (statement . 0)
                    (statement-block-intro . ++)
                    (block-close . 0)
                    (inline-close . 0)
                    (defun-close . 0)
                    (member-init-intro . +)
                    (statement-cont . +)
                    (innamespace . 0)
                    (namespace-close . 0)
                    (brace-list-intro . +)
                    (brace-list-entry . 0)
                    (brace-entry-open . 0)
                    (brace-list-close . 0)
                    (c . c-lineup-C-comments)
                    (inher-cont . c-lineup-multi-inher)
                    (string . -1000)
                    (comment-intro . c-lineup-comment)
                    (arglist-cont-nonempty . c-lineup-arglist)
                    (arglist-close . c-lineup-close-paren)
                    (cpp-macro . -1000))))

    (setq c-default-style "openbsd")
  #+END_SRC

* pkg-config!
  A blessing and curse...

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-pkg-config
      :if (executable-find "pkg-config")
      :ensure t)
  #+END_SRC

* CMake
  Sometimes things I work on use CMake.

  #+BEGIN_SRC emacs-lisp
    (use-package cmake-mode
      :ensure t)
  #+END_SRC

* clang-format
  Make things pretty on command.

  #+BEGIN_SRC emacs-lisp
    (use-package clang-format
      :ensure t)
  #+END_SRC
